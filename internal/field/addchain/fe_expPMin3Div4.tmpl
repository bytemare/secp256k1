// SPDX-License-Identifier: MIT
//
// Copyright (C) 2020-2024 Daniel Bourdrez. All Rights Reserved.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree or at
// https://spdx.org/licenses/MIT.html
//
// Code generated by {{ .Meta.Name }}. DO NOT EDIT.

package field

// expPMin3Div4 computes e = a^((p - 3) / 4) mod p and returns it.
func (z *Element) expPMin3Div4(x *Element) *Element {
	// Inversion computation is derived from the addition chain:
	//
	{{- range lines (format .Script) }}
	//	{{ . }}
	{{- end }}
	//
	// Operations: {{ .Ops.Doubles }} squares {{ .Ops.Adds }} multiplies
	//
	// Generated by {{ .Meta.Module }} {{ .Meta.ReleaseTag }}.

	// Allocate Temporaries.
	var (
		{{- range .Program.Temporaries }}
		{{ . }} = New()
		{{- end -}}
	)

	{{ range $i := .Program.Instructions }}
	// {{ printf "Step %d: %s = x^%#x" $i.Output.Index $i.Output (index $.Chain $i.Output.Index) }}
	{{- with add $i.Op }}
	{{ $i.Output }}.Multiply({{ .X }}, {{ .Y }})
	{{ end -}}

	{{- with double $i.Op }}
	{{ $i.Output }}.Square({{ .X }})
	{{ end -}}

	{{- with shift $i.Op -}}
	{{- $first := 0 -}}
	{{- if ne $i.Output.Identifier .X.Identifier }}
	{{ $i.Output }}.Square({{ .X }})
	{{- $first = 1 -}}
	{{- end }}
	for s := {{ $first }}; s < {{ .S }}; s++ {
		{{ $i.Output }}.Square({{ $i.Output }})
	}
	{{ end -}}
	{{- end }}
	return z
}